#!/usr/bin/perl

# Copyright (c) 2014 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use URI;
use URI::QueryParam;
use HTTP::Request;
use LWP::UserAgent;

# $url = 'https://coinbase.com/oauth/token';
# $scope='perma+permb';
# $authorize = 'https://coinbase.com/oauth/authorize?response_type=code'.
#	'&client_id='.$client_id.
#	'&redirect_uri='.
#	'&scope='.$scope;


my ($client_id,$client_secret,$site);
open(N,"$ENV{'HOME'}/.cbn.conf");
chomp($client_id = <N>);
chomp($client_secret = <N>);
close(N);
#chomp($site = <stdin>);


my $urlbase = 'https://coinbase.com/oauth';
my $authurl = $urlbase . '/authorize';
my $tokenurl = $urlbase . '/token';

my $type = 'authorization_code';
my $codefield = 'code';

my $uri = URI->new($tokenurl);

if ($type eq 'refresh_token') {
	$codefield = 'refresh_token';
}
print STDERR "Browse to:\nhttps://coinbase.com/oauth/authorize?response_type=code&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&client_id=".$client_id."&scope=balance\n";
print STDERR "Code? ";
my $code;
chomp($code = <stdin>);

$uri->query_param(client_id => $client_id);
$uri->query_param(client_secret => $client_secret);
$uri->query_param(redirect_uri => 'urn:ietf:wg:oauth:2.0:oob');
$uri->query_param(grant_type => $type);
$uri->query_param(scope => 'balance');
$uri->query_param($codefield => $code);

my $req = HTTP::Request->new( 'POST', $uri );

printf STDERR "--- BEGIN req ---\n%s\n--- END req ---\n", $req->as_string;

my $ua = LWP::UserAgent->new;
my $response = $ua->request($req);

if ($response->is_success) {
	print $response->decoded_content;
} else {
	print STDERR $response->status_line, "\n";
	print STDERR $response->as_string;
}
